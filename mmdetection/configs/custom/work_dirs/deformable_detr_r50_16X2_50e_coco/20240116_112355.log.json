{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.12.1+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu116\nOpenCV: 4.7.0\nMMCV: 1.6.2\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.25.3+", "config": "dataset_type = 'CocoDataset'\ndata_root = '../../../dataset/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type':\n            'Resize',\n            'img_scale': [(480, 1333), (512, 1333), (544, 1333), (576, 1333),\n                          (608, 1333), (640, 1333), (672, 1333), (704, 1333),\n                          (736, 1333), (768, 1333), (800, 1333)],\n            'multiscale_mode':\n            'value',\n            'keep_ratio':\n            True\n        }],\n                  [{\n                      'type': 'Resize',\n                      'img_scale': [(400, 4200), (500, 4200), (600, 4200)],\n                      'multiscale_mode': 'value',\n                      'keep_ratio': True\n                  }, {\n                      'type': 'RandomCrop',\n                      'crop_type': 'absolute_range',\n                      'crop_size': (384, 600),\n                      'allow_negative_crop': True\n                  }, {\n                      'type':\n                      'Resize',\n                      'img_scale': [(480, 1333), (512, 1333), (544, 1333),\n                                    (576, 1333), (608, 1333), (640, 1333),\n                                    (672, 1333), (704, 1333), (736, 1333),\n                                    (768, 1333), (800, 1333)],\n                      'multiscale_mode':\n                      'value',\n                      'override':\n                      True,\n                      'keep_ratio':\n                      True\n                  }]]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=1),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=1),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../../../dataset/skfold/cv_train_skfold1.json',\n        img_prefix='../../../dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='AutoAugment',\n                policies=[[{\n                    'type':\n                    'Resize',\n                    'img_scale': [(480, 1333), (512, 1333), (544, 1333),\n                                  (576, 1333), (608, 1333), (640, 1333),\n                                  (672, 1333), (704, 1333), (736, 1333),\n                                  (768, 1333), (800, 1333)],\n                    'multiscale_mode':\n                    'value',\n                    'keep_ratio':\n                    True\n                }],\n                          [{\n                              'type': 'Resize',\n                              'img_scale': [(400, 4200), (500, 4200),\n                                            (600, 4200)],\n                              'multiscale_mode': 'value',\n                              'keep_ratio': True\n                          }, {\n                              'type': 'RandomCrop',\n                              'crop_type': 'absolute_range',\n                              'crop_size': (384, 600),\n                              'allow_negative_crop': True\n                          }, {\n                              'type':\n                              'Resize',\n                              'img_scale': [(480, 1333), (512, 1333),\n                                            (544, 1333), (576, 1333),\n                                            (608, 1333), (640, 1333),\n                                            (672, 1333), (704, 1333),\n                                            (736, 1333), (768, 1333),\n                                            (800, 1333)],\n                              'multiscale_mode':\n                              'value',\n                              'override':\n                              True,\n                              'keep_ratio':\n                              True\n                          }]]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=1),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        filter_empty_gt=False),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../../dataset/skfold/cv_val_skfold1.json',\n        img_prefix='../../../dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=1),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../../dataset/test.json',\n        img_prefix='../../../dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=1),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', classwise=True)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=32)\nmodel = dict(\n    type='DeformableDETR',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='ChannelMapper',\n        in_channels=[512, 1024, 2048],\n        kernel_size=1,\n        out_channels=256,\n        act_cfg=None,\n        norm_cfg=dict(type='GN', num_groups=32),\n        num_outs=4),\n    bbox_head=dict(\n        type='DeformableDETRHead',\n        num_query=300,\n        num_classes=10,\n        in_channels=2048,\n        sync_cls_avg_factor=True,\n        as_two_stage=False,\n        transformer=dict(\n            type='DeformableDetrTransformer',\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention', embed_dims=256),\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),\n            decoder=dict(\n                type='DeformableDetrTransformerDecoder',\n                num_layers=6,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(\n                            type='MultiScaleDeformableAttention',\n                            embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=5.0),\n        loss_iou=dict(type='GIoULoss', loss_weight=2.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='HungarianAssigner',\n            cls_cost=dict(type='FocalLossCost', weight=2.0),\n            reg_cost=dict(type='BBoxL1Cost', weight=5.0, box_format='xywh'),\n            iou_cost=dict(type='IoUCost', iou_mode='giou', weight=2.0))),\n    test_cfg=dict(max_per_img=100))\noptimizer = dict(\n    type='AdamW',\n    lr=0.0002,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            backbone=dict(lr_mult=0.1),\n            sampling_offsets=dict(lr_mult=0.1),\n            reference_points=dict(lr_mult=0.1))))\noptimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))\nlr_config = dict(policy='step', step=[40])\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nwork_dir = '../configs/custom/work_dirs/deformable_detr_r50_16X2_50e_coco/'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 277245409, "exp_name": "deformable_detr_r50_16X2_50e_coco.py"}
