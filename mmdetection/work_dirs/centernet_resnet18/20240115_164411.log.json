{"env_info": "sys.platform: linux\nPython: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.12.1+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu116\nOpenCV: 4.7.0\nMMCV: 1.6.2\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.25.3+", "config": "dataset_type = 'CocoDataset'\ndata_root = '../../../dataset/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True, color_type='color'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='RandomCenterCropPad',\n        crop_size=(512, 512),\n        ratios=(0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3),\n        mean=[0, 0, 0],\n        std=[1, 1, 1],\n        to_rgb=True,\n        test_pad_mode=None),\n    dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(\n        type='MultiScaleFlipAug',\n        scale_factor=1.0,\n        flip=False,\n        transforms=[\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(\n                type='RandomCenterCropPad',\n                ratios=None,\n                border=None,\n                mean=[0, 0, 0],\n                std=[1, 1, 1],\n                to_rgb=True,\n                test_mode=True,\n                test_pad_mode=['logical_or', 31],\n                test_pad_add_pix=1),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                meta_keys=('filename', 'ori_filename', 'ori_shape',\n                           'img_shape', 'pad_shape', 'scale_factor', 'flip',\n                           'flip_direction', 'img_norm_cfg', 'border'),\n                keys=['img'])\n        ])\n]\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=4,\n    train=dict(\n        type='RepeatDataset',\n        times=5,\n        dataset=dict(\n            type='CocoDataset',\n            ann_file='../../../dataset/skfold/cv_train_skfold1.json',\n            img_prefix='../../../dataset/',\n            classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                     'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',\n                     'Clothing'),\n            pipeline=[\n                dict(\n                    type='LoadImageFromFile',\n                    to_float32=True,\n                    color_type='color'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(\n                    type='PhotoMetricDistortion',\n                    brightness_delta=32,\n                    contrast_range=(0.5, 1.5),\n                    saturation_range=(0.5, 1.5),\n                    hue_delta=18),\n                dict(\n                    type='RandomCenterCropPad',\n                    crop_size=(512, 512),\n                    ratios=(0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3),\n                    mean=[0, 0, 0],\n                    std=[1, 1, 1],\n                    to_rgb=True,\n                    test_pad_mode=None),\n                dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ])),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../../../dataset/skfold/cv_val_skfold1.json',\n        img_prefix='../../../dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(\n                type='MultiScaleFlipAug',\n                scale_factor=1.0,\n                flip=False,\n                transforms=[\n                    dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n                    dict(\n                        type='RandomCenterCropPad',\n                        ratios=None,\n                        border=None,\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True,\n                        test_mode=True,\n                        test_pad_mode=['logical_or', 31],\n                        test_pad_add_pix=1),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        meta_keys=('filename', 'ori_filename', 'ori_shape',\n                                   'img_shape', 'pad_shape', 'scale_factor',\n                                   'flip', 'flip_direction', 'img_norm_cfg',\n                                   'border'),\n                        keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../../../dataset/test.json',\n        img_prefix='../../../dataset/',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(\n                type='MultiScaleFlipAug',\n                scale_factor=1.0,\n                flip=False,\n                transforms=[\n                    dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n                    dict(\n                        type='RandomCenterCropPad',\n                        ratios=None,\n                        border=None,\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True,\n                        test_mode=True,\n                        test_pad_mode=['logical_or', 31],\n                        test_pad_add_pix=1),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        meta_keys=('filename', 'ori_filename', 'ori_shape',\n                                   'img_shape', 'pad_shape', 'scale_factor',\n                                   'flip', 'flip_direction', 'img_norm_cfg',\n                                   'border'),\n                        keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', classwise=True)\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.001,\n    step=[18, 24])\nrunner = dict(type='EpochBasedRunner', max_epochs=28)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=128)\nmodel = dict(\n    type='CenterNet',\n    backbone=dict(\n        type='ResNet',\n        depth=18,\n        norm_eval=False,\n        norm_cfg=dict(type='BN'),\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet18')),\n    neck=dict(\n        type='CTResNetNeck',\n        in_channel=512,\n        num_deconv_filters=(256, 128, 64),\n        num_deconv_kernels=(4, 4, 4),\n        use_dcn=True),\n    bbox_head=dict(\n        type='CenterNetHead',\n        num_classes=10,\n        in_channel=64,\n        feat_channel=64,\n        loss_center_heatmap=dict(type='GaussianFocalLoss', loss_weight=1.0),\n        loss_wh=dict(type='L1Loss', loss_weight=0.1),\n        loss_offset=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=None,\n    test_cfg=dict(topk=100, local_maximum_kernel=3, max_per_img=100))\nwork_dir = '../work_dirs/centernet_resnet18'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1285267524, "exp_name": "centernet_resnet18_dcnv2_140e_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.001, "memory": 2800, "data_time": 0.08647, "loss_center_heatmap": 29.35371, "loss_wh": 6.2713, "loss_offset": 0.48253, "loss": 36.10754, "grad_norm": 100.05202, "time": 0.33671}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.002, "memory": 2800, "data_time": 0.02815, "loss_center_heatmap": 4.13928, "loss_wh": 6.30803, "loss_offset": 0.35907, "loss": 10.80638, "grad_norm": 18.08781, "time": 0.24283}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.003, "memory": 2800, "data_time": 0.02562, "loss_center_heatmap": 4.08636, "loss_wh": 6.1182, "loss_offset": 0.2795, "loss": 10.48405, "grad_norm": 11.96974, "time": 0.23951}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.004, "memory": 2800, "data_time": 0.02691, "loss_center_heatmap": 3.99235, "loss_wh": 6.25362, "loss_offset": 0.27313, "loss": 10.5191, "grad_norm": 9.88625, "time": 0.23961}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.005, "memory": 2800, "data_time": 0.02627, "loss_center_heatmap": 4.04684, "loss_wh": 6.23512, "loss_offset": 0.27392, "loss": 10.55588, "grad_norm": 7.6482, "time": 0.23862}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00599, "memory": 2800, "data_time": 0.02543, "loss_center_heatmap": 4.01723, "loss_wh": 6.21199, "loss_offset": 0.27654, "loss": 10.50575, "grad_norm": 8.36376, "time": 0.23821}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00699, "memory": 2800, "data_time": 0.02437, "loss_center_heatmap": 4.11254, "loss_wh": 6.43573, "loss_offset": 0.27691, "loss": 10.82518, "grad_norm": 9.59059, "time": 0.23291}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00799, "memory": 2800, "data_time": 0.02587, "loss_center_heatmap": 4.13099, "loss_wh": 6.27529, "loss_offset": 0.27935, "loss": 10.68564, "grad_norm": 9.59477, "time": 0.2412}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 2800, "data_time": 0.02634, "loss_center_heatmap": 4.24977, "loss_wh": 5.44178, "loss_offset": 0.27761, "loss": 9.96916, "grad_norm": 19.85407, "time": 0.24103}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00999, "memory": 2800, "data_time": 0.02564, "loss_center_heatmap": 4.29366, "loss_wh": 2.72518, "loss_offset": 0.27081, "loss": 7.28965, "grad_norm": 112.86306, "time": 0.23756}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.01099, "memory": 2800, "data_time": 0.0263, "loss_center_heatmap": 4.42372, "loss_wh": 3.08627, "loss_offset": 0.27049, "loss": 7.78047, "grad_norm": 154.25775, "time": 0.24351}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.01199, "memory": 2800, "data_time": 0.02584, "loss_center_heatmap": 4.52758, "loss_wh": 2.92997, "loss_offset": 0.26705, "loss": 7.7246, "grad_norm": 158.21225, "time": 0.23831}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.01299, "memory": 2800, "data_time": 0.02946, "loss_center_heatmap": 4.32919, "loss_wh": 2.76384, "loss_offset": 0.27069, "loss": 7.36372, "grad_norm": 50.63741, "time": 0.24629}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.01399, "memory": 2800, "data_time": 0.02885, "loss_center_heatmap": 4.33106, "loss_wh": 2.63434, "loss_offset": 0.27299, "loss": 7.23839, "grad_norm": 10.37907, "time": 0.24127}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.01499, "memory": 2800, "data_time": 0.02913, "loss_center_heatmap": 4.33624, "loss_wh": 2.65742, "loss_offset": 0.2719, "loss": 7.26557, "grad_norm": 9.80194, "time": 0.2423}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.01598, "memory": 2800, "data_time": 0.02792, "loss_center_heatmap": 4.33335, "loss_wh": 2.73938, "loss_offset": 0.26687, "loss": 7.33959, "grad_norm": 10.63125, "time": 0.24061}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.01698, "memory": 2800, "data_time": 0.028, "loss_center_heatmap": 4.26398, "loss_wh": 2.76728, "loss_offset": 0.26811, "loss": 7.29938, "grad_norm": 7.92289, "time": 0.24598}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.01798, "memory": 2800, "data_time": 0.02664, "loss_center_heatmap": 4.35315, "loss_wh": 2.64543, "loss_offset": 0.26372, "loss": 7.2623, "grad_norm": 5.88294, "time": 0.24357}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.01898, "memory": 2800, "data_time": 0.0271, "loss_center_heatmap": 4.19908, "loss_wh": 2.30023, "loss_offset": 0.27076, "loss": 6.77008, "grad_norm": 3.99415, "time": 0.23985}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.01998, "memory": 2800, "data_time": 0.02709, "loss_center_heatmap": 4.24974, "loss_wh": 2.32201, "loss_offset": 0.27431, "loss": 6.84606, "grad_norm": 66.62714, "time": 0.24111}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 2800, "data_time": 0.02693, "loss_center_heatmap": 4.2288, "loss_wh": 2.47404, "loss_offset": 0.2693, "loss": 6.97214, "grad_norm": 4.58403, "time": 0.23994}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 2800, "data_time": 0.02883, "loss_center_heatmap": 4.23289, "loss_wh": 2.50077, "loss_offset": 0.26311, "loss": 6.99677, "grad_norm": 5.057, "time": 0.24252}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 2800, "data_time": 0.02718, "loss_center_heatmap": 4.23846, "loss_wh": 2.60802, "loss_offset": 0.27138, "loss": 7.11786, "grad_norm": 6.66671, "time": 0.23939}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 2800, "data_time": 0.029, "loss_center_heatmap": 4.26344, "loss_wh": 2.73504, "loss_offset": 0.26204, "loss": 7.26051, "grad_norm": 5.15674, "time": 0.24369}
{"mode": "val", "epoch": 1, "iter": 969, "lr": 0.02, "bbox_mAP": 0.0, "bbox_mAP_50": 0.0, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.000 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.02, "memory": 2800, "data_time": 0.09051, "loss_center_heatmap": 4.20743, "loss_wh": 2.51161, "loss_offset": 0.26169, "loss": 6.98073, "grad_norm": 4.53152, "time": 0.30998}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.02, "memory": 2800, "data_time": 0.02535, "loss_center_heatmap": 4.19605, "loss_wh": 2.72587, "loss_offset": 0.2614, "loss": 7.18332, "grad_norm": 6.29911, "time": 0.23886}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.02, "memory": 2800, "data_time": 0.02733, "loss_center_heatmap": 4.16148, "loss_wh": 2.40333, "loss_offset": 0.2555, "loss": 6.82031, "grad_norm": 4.5202, "time": 0.24876}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.02, "memory": 2800, "data_time": 0.02685, "loss_center_heatmap": 4.18778, "loss_wh": 2.4114, "loss_offset": 0.26376, "loss": 6.86295, "grad_norm": 4.34496, "time": 0.24245}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.02, "memory": 2800, "data_time": 0.02769, "loss_center_heatmap": 4.18756, "loss_wh": 2.5633, "loss_offset": 0.26525, "loss": 7.01611, "grad_norm": 4.73953, "time": 0.24216}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.02, "memory": 2800, "data_time": 0.02544, "loss_center_heatmap": 4.18312, "loss_wh": 2.62776, "loss_offset": 0.26722, "loss": 7.0781, "grad_norm": 5.79432, "time": 0.24678}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.02, "memory": 2800, "data_time": 0.02624, "loss_center_heatmap": 4.17355, "loss_wh": 2.74642, "loss_offset": 0.27359, "loss": 7.19356, "grad_norm": 5.09357, "time": 0.24527}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.02, "memory": 2800, "data_time": 0.02679, "loss_center_heatmap": 4.22583, "loss_wh": 2.80296, "loss_offset": 0.27405, "loss": 7.30284, "grad_norm": 4.41205, "time": 0.24289}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.02, "memory": 2800, "data_time": 0.02649, "loss_center_heatmap": 4.20557, "loss_wh": 2.60449, "loss_offset": 0.26836, "loss": 7.07843, "grad_norm": 5.73422, "time": 0.23764}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.02, "memory": 2800, "data_time": 0.0279, "loss_center_heatmap": 4.24889, "loss_wh": 2.97412, "loss_offset": 0.27101, "loss": 7.49402, "grad_norm": 5.62425, "time": 0.24067}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.02, "memory": 2800, "data_time": 0.03139, "loss_center_heatmap": 4.25755, "loss_wh": 3.33004, "loss_offset": 0.27425, "loss": 7.86184, "grad_norm": 2.62625, "time": 0.25256}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.02, "memory": 2800, "data_time": 0.02681, "loss_center_heatmap": 4.20973, "loss_wh": 3.27035, "loss_offset": 0.26721, "loss": 7.74729, "grad_norm": 1.69834, "time": 0.24261}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.02, "memory": 2800, "data_time": 0.02465, "loss_center_heatmap": 4.23802, "loss_wh": 3.20465, "loss_offset": 0.26964, "loss": 7.71231, "grad_norm": 5.14368, "time": 0.23783}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.02, "memory": 2800, "data_time": 0.02747, "loss_center_heatmap": 4.26593, "loss_wh": 3.20637, "loss_offset": 0.26817, "loss": 7.74047, "grad_norm": 3.23575, "time": 0.23814}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.02, "memory": 2800, "data_time": 0.02635, "loss_center_heatmap": 4.18515, "loss_wh": 2.95145, "loss_offset": 0.26843, "loss": 7.40503, "grad_norm": 4.06989, "time": 0.23913}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.02, "memory": 2800, "data_time": 0.02606, "loss_center_heatmap": 4.22212, "loss_wh": 2.78417, "loss_offset": 0.26649, "loss": 7.27277, "grad_norm": 5.68041, "time": 0.23872}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.02, "memory": 2800, "data_time": 0.02769, "loss_center_heatmap": 4.24265, "loss_wh": 2.75335, "loss_offset": 0.27177, "loss": 7.26776, "grad_norm": 5.1896, "time": 0.24261}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.02, "memory": 2800, "data_time": 0.02614, "loss_center_heatmap": 4.18372, "loss_wh": 2.74, "loss_offset": 0.26802, "loss": 7.19173, "grad_norm": 4.68482, "time": 0.23686}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.02, "memory": 2800, "data_time": 0.02655, "loss_center_heatmap": 4.1758, "loss_wh": 2.73833, "loss_offset": 0.27265, "loss": 7.18678, "grad_norm": 2.6757, "time": 0.24451}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.02, "memory": 2800, "data_time": 0.02787, "loss_center_heatmap": 4.16912, "loss_wh": 2.48868, "loss_offset": 0.26508, "loss": 6.92288, "grad_norm": 3.49558, "time": 0.2456}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.02, "memory": 2800, "data_time": 0.02675, "loss_center_heatmap": 4.18946, "loss_wh": 2.59666, "loss_offset": 0.27221, "loss": 7.05833, "grad_norm": 4.28945, "time": 0.24181}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.02, "memory": 2800, "data_time": 0.0271, "loss_center_heatmap": 4.1925, "loss_wh": 2.53754, "loss_offset": 0.26379, "loss": 6.99383, "grad_norm": 4.25416, "time": 0.24338}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.02, "memory": 2800, "data_time": 0.02587, "loss_center_heatmap": 4.13553, "loss_wh": 2.36871, "loss_offset": 0.25705, "loss": 6.76129, "grad_norm": 3.92512, "time": 0.24534}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.02, "memory": 2800, "data_time": 0.02512, "loss_center_heatmap": 4.18492, "loss_wh": 2.58874, "loss_offset": 0.26919, "loss": 7.04285, "grad_norm": 3.58035, "time": 0.24346}
{"mode": "val", "epoch": 2, "iter": 969, "lr": 0.02, "bbox_mAP": 0.0, "bbox_mAP_50": 0.0, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.000 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 2800, "data_time": 0.09182, "loss_center_heatmap": 4.25122, "loss_wh": 2.59614, "loss_offset": 0.26474, "loss": 7.11209, "grad_norm": 10.86649, "time": 0.30402}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 2800, "data_time": 0.02544, "loss_center_heatmap": 4.19208, "loss_wh": 2.43283, "loss_offset": 0.26194, "loss": 6.88684, "grad_norm": 3.9155, "time": 0.23425}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 2800, "data_time": 0.02436, "loss_center_heatmap": 4.16737, "loss_wh": 2.33546, "loss_offset": 0.26332, "loss": 6.76615, "grad_norm": 4.01865, "time": 0.24121}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 2800, "data_time": 0.02449, "loss_center_heatmap": 4.18159, "loss_wh": 2.31344, "loss_offset": 0.26128, "loss": 6.75631, "grad_norm": 3.5293, "time": 0.23624}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.02, "memory": 2800, "data_time": 0.02816, "loss_center_heatmap": 4.16501, "loss_wh": 2.26738, "loss_offset": 0.26166, "loss": 6.69405, "grad_norm": 3.2065, "time": 0.24514}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.02, "memory": 2800, "data_time": 0.02931, "loss_center_heatmap": 4.16944, "loss_wh": 2.39005, "loss_offset": 0.26377, "loss": 6.82325, "grad_norm": 3.36672, "time": 0.2472}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.02, "memory": 2800, "data_time": 0.02757, "loss_center_heatmap": 4.1526, "loss_wh": 2.42624, "loss_offset": 0.26335, "loss": 6.84219, "grad_norm": 3.84207, "time": 0.24226}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.02, "memory": 2800, "data_time": 0.0267, "loss_center_heatmap": 4.19815, "loss_wh": 2.60878, "loss_offset": 0.26528, "loss": 7.07222, "grad_norm": 5.2969, "time": 0.24081}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.02, "memory": 2800, "data_time": 0.02462, "loss_center_heatmap": 4.21725, "loss_wh": 2.97344, "loss_offset": 0.2716, "loss": 7.46229, "grad_norm": 4.36989, "time": 0.23564}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.02, "memory": 2800, "data_time": 0.02609, "loss_center_heatmap": 4.20219, "loss_wh": 3.11669, "loss_offset": 0.27171, "loss": 7.59059, "grad_norm": 4.21986, "time": 0.24029}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.02, "memory": 2800, "data_time": 0.02628, "loss_center_heatmap": 4.17523, "loss_wh": 2.91321, "loss_offset": 0.2688, "loss": 7.35725, "grad_norm": 3.738, "time": 0.24115}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.02, "memory": 2800, "data_time": 0.02829, "loss_center_heatmap": 4.17972, "loss_wh": 2.65811, "loss_offset": 0.26823, "loss": 7.10605, "grad_norm": 4.889, "time": 0.24393}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.02, "memory": 2800, "data_time": 0.02815, "loss_center_heatmap": 4.20586, "loss_wh": 3.09913, "loss_offset": 0.26521, "loss": 7.5702, "grad_norm": 5.66905, "time": 0.24104}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.02, "memory": 2800, "data_time": 0.03035, "loss_center_heatmap": 4.19169, "loss_wh": 3.22859, "loss_offset": 0.27264, "loss": 7.69292, "grad_norm": 1.71747, "time": 0.24662}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.02, "memory": 2800, "data_time": 0.0287, "loss_center_heatmap": 4.214, "loss_wh": 3.25337, "loss_offset": 0.26807, "loss": 7.73544, "grad_norm": 1.05604, "time": 0.24394}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.02, "memory": 2800, "data_time": 0.02673, "loss_center_heatmap": 4.22872, "loss_wh": 3.15407, "loss_offset": 0.27556, "loss": 7.65835, "grad_norm": 1.24727, "time": 0.24253}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.02, "memory": 2800, "data_time": 0.02785, "loss_center_heatmap": 4.21098, "loss_wh": 3.20721, "loss_offset": 0.27054, "loss": 7.68872, "grad_norm": 1.39931, "time": 0.24458}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.02, "memory": 2800, "data_time": 0.02831, "loss_center_heatmap": 4.23203, "loss_wh": 3.10796, "loss_offset": 0.27411, "loss": 7.6141, "grad_norm": 2.23057, "time": 0.24324}
{"mode": "train", "epoch": 3, "iter": 950, "lr": 0.02, "memory": 2800, "data_time": 0.02879, "loss_center_heatmap": 4.16596, "loss_wh": 3.09705, "loss_offset": 0.2709, "loss": 7.53391, "grad_norm": 1.01993, "time": 0.25067}
{"mode": "train", "epoch": 3, "iter": 1000, "lr": 0.02, "memory": 2800, "data_time": 0.02616, "loss_center_heatmap": 4.23774, "loss_wh": 3.25076, "loss_offset": 0.26972, "loss": 7.75822, "grad_norm": 1.1204, "time": 0.23697}
{"mode": "train", "epoch": 3, "iter": 1050, "lr": 0.02, "memory": 2800, "data_time": 0.02861, "loss_center_heatmap": 4.21817, "loss_wh": 3.19637, "loss_offset": 0.27555, "loss": 7.69008, "grad_norm": 1.0181, "time": 0.24106}
{"mode": "train", "epoch": 3, "iter": 1100, "lr": 0.02, "memory": 2800, "data_time": 0.02817, "loss_center_heatmap": 4.21145, "loss_wh": 3.30556, "loss_offset": 0.27011, "loss": 7.78712, "grad_norm": 1.18312, "time": 0.24142}
{"mode": "train", "epoch": 3, "iter": 1150, "lr": 0.02, "memory": 2800, "data_time": 0.02864, "loss_center_heatmap": 4.21139, "loss_wh": 3.16449, "loss_offset": 0.26972, "loss": 7.6456, "grad_norm": 1.03137, "time": 0.24429}
{"mode": "train", "epoch": 3, "iter": 1200, "lr": 0.02, "memory": 2800, "data_time": 0.0274, "loss_center_heatmap": 4.23634, "loss_wh": 3.23469, "loss_offset": 0.27304, "loss": 7.74406, "grad_norm": 1.19019, "time": 0.23826}
{"mode": "val", "epoch": 3, "iter": 969, "lr": 0.02, "bbox_mAP": 0.0, "bbox_mAP_50": 0.0, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.000 0.000 0.000 0.000 0.000"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 2800, "data_time": 0.08981, "loss_center_heatmap": 4.21829, "loss_wh": 3.25378, "loss_offset": 0.27034, "loss": 7.74242, "grad_norm": 1.21849, "time": 0.30587}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 2800, "data_time": 0.02638, "loss_center_heatmap": 4.21541, "loss_wh": 3.11111, "loss_offset": 0.26539, "loss": 7.59192, "grad_norm": 1.00857, "time": 0.24146}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 2800, "data_time": 0.02481, "loss_center_heatmap": 4.21175, "loss_wh": 3.25035, "loss_offset": 0.27444, "loss": 7.73654, "grad_norm": 1.12788, "time": 0.23646}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 2800, "data_time": 0.02607, "loss_center_heatmap": 4.21081, "loss_wh": 3.17624, "loss_offset": 0.26724, "loss": 7.65429, "grad_norm": 2.00287, "time": 0.2403}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.02, "memory": 2800, "data_time": 0.03036, "loss_center_heatmap": 4.23004, "loss_wh": 3.14226, "loss_offset": 0.27091, "loss": 7.64321, "grad_norm": 1.08288, "time": 0.2533}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.02, "memory": 2800, "data_time": 0.02638, "loss_center_heatmap": 4.20666, "loss_wh": 2.88823, "loss_offset": 0.26736, "loss": 7.36225, "grad_norm": 3.59367, "time": 0.24058}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.02, "memory": 2800, "data_time": 0.02605, "loss_center_heatmap": 4.19094, "loss_wh": 3.01504, "loss_offset": 0.27159, "loss": 7.47757, "grad_norm": 1.39842, "time": 0.24017}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.02, "memory": 2800, "data_time": 0.02462, "loss_center_heatmap": 4.19564, "loss_wh": 3.21603, "loss_offset": 0.27201, "loss": 7.68368, "grad_norm": 1.73556, "time": 0.2369}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.02, "memory": 2800, "data_time": 0.02611, "loss_center_heatmap": 4.22671, "loss_wh": 3.06232, "loss_offset": 0.27278, "loss": 7.56181, "grad_norm": 2.91376, "time": 0.23793}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.02, "memory": 2800, "data_time": 0.02595, "loss_center_heatmap": 4.21695, "loss_wh": 3.2496, "loss_offset": 0.27756, "loss": 7.74411, "grad_norm": 2.80264, "time": 0.23831}
{"mode": "train", "epoch": 4, "iter": 550, "lr": 0.02, "memory": 2800, "data_time": 0.02784, "loss_center_heatmap": 4.14853, "loss_wh": 2.83077, "loss_offset": 0.27399, "loss": 7.25329, "grad_norm": 5.36097, "time": 0.2465}
